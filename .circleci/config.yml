# Required environment variables
# CODECLIMATE_REPO_TOKEN  - for reporting code climate statistics
# ROLLBAR_ACCESS_TOKEN    - for reporting code deployments

version: 2

aliases:

  - defaults: &defaults
      docker:
        - image: circleci/node:boron
      working_directory: ~/code

  - &restore-repo-cache
      key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}

  - &restore-yarn-cache
      key: v1-yarn-packages-{{ checksum "yarn.lock" }}
  - &save-yarn-cache
      key: v1-yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - ~/.cache/yarn
  - &yarn
    |
      yarn install --non-interactive --cache-folder ~/.cache/yarn --frozen-lockfile

  - &restore-bower-cache
      key: v1-bower-components-{{ checksum "bower.json" }}
  - &save-bower-cache
      key: v1-bower-components-{{ checksum "bower.json" }}
      paths:
        - bower_components
      
  - &restore-bundler-cache
      key: v1-bundle-{{ checksum "Gemfile.lock" }}
  - &save-bundler-cache
      key: v1-bundle-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/code

  package_dependencies:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache
      - restore-cache: *restore-bower-cache
      - run: yarn run bower install
      - save-cache: *save-bower-cache

  tests:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Start Ember test server
          command: yarn run ember server --port 4201
          background: true
      - run:
          name: Wait for Ember test server to start
          command: dockerize -wait tcp://localhost:4201 -timeout 1m
      - run:
          name: Run Ember tests
          command: yarn run ember test
          environment:
            COVERAGE: true
      - persist_to_workspace:
          root: coverage
          paths:
            - lcov*

  upload-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/code
      - run:
          name: Upload coverage results to Code Climate
          command: |
            yarn run ember coverage-merge
            yarn run codeclimate-test-reporter < coverage/lcov.info

  android_build:
    <<: *defaults
    docker:
      - image: circleci/android:api-23-node8-alpha
    steps:
      - run: echo "Android build!"

  android_deploy:
    <<: *defaults
    steps:
      - run: echo "Android deploy!"

  ios_build:
    <<: *defaults
    steps:
      - run: echo "iOS build!"

  ios_deploy:
    <<: *defaults
    steps:
      - run: echo "iOS deploy!"

  www_build:
    <<: *defaults
    environment:
        EMBER_CLI_CORDOVA: "0"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Setup Environment variables
          command: |
            echo 'export APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)' >> $BASH_ENV
            echo 'export APP_SHARED_SHA=$(node -pe 'JSON.parse(process.argv[1]).gitHead' "$(cat $CIRCLE_WORKING_DIRECTORY/node_modules/shared-goodcity/package.json)" | cut -c1-7)' >> $BASH_ENV
            echo 'export staging=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo false; else echo true; fi)' >> $BASH_ENV
      - run:
          name: Print Environment Variables
          command: |
            echo APP_SHA=$APP_SHA
            echo APP_SHARED_SHA=$APP_SHARED_SHA
            echo staging=$staging
      - run: ember build --environment=production
      - run: mv dist/ dist-www
      - persist_to_workspace:
          root: dist-www
          paths:
            - '*'

  www_deploy:
    <<: *defaults
    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-bundler-cache
      - run: bundle check --path=vendor/bundle || bundle install --deployment --jobs=4 --retry=3
      - save-cache: *save-bundler-cache
      - attach_workspace:
          at: ~/code/dist
      - run:
          name: Setup Environment
          command: |
            echo 'export STAGE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
            echo 'export APP_VERSION=$(ruby -e 'require "nokogiri"; puts Nokogiri::XML(File.open("#{ENV["CIRCLE_WORKING_DIRECTORY"]}/cordova/config.xml")).css("widget").attr("version").content')' >> $BASH_ENV
      - run:
          name: Print Environment Variables
          command: |
            echo STAGE=$STAGE
            echo APP_VERSION=$APP_VERSION
      - run: echo bundle exec cap $STAGE deploy:upload
      - run:
          name: Upload Source Map to Rollbar
          command: |
            curl https://api.rollbar.com/api/1/sourcemap/download -F access_token=$ROLLBAR_ACCESS_TOKEN -F version=$APP_VERSION -F minified_url=https://admin-staging.goodcity.hk/assets/goodcity.js

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - checkout_code
      - package_dependencies:
          requires:
            - checkout_code
      # - tests:
      #     requires:
      #       - package_dependencies
      # - upload-coverage:
      #     requires:
      #       - tests
      # - android_build:
      #     requires:
      #       - tests
      # - android_deploy:
      #     requires:
      #       - android_build
      #       - tests
      # - ios_build:
      #     requires:
      #       - ember_build
      # - ios_deploy:
      #     requires:
      #       - ios_build
      #       - tests
      - www_build:
          requires:
            - package_dependencies #tests
          filters:
            branches:
              only: /^(master|live|circle2)$/
      - www_deploy:
          requires:
            - www_build
          filters:
            branches:
              only: /^(master|live|circle2)$/